#!/usr/bin/python
# -*- coding: utf-8 -*-

#
# This code shows why you need to know your shit
# prior to coding.
#
# This is just a bunch of text lines that python
# happens to parse.
#

try:
  import sys
except Exception, e:
  print "Could not load ''sys'': %s" %(e)
  exit(1)

try:
  import os
  from argparse import ArgumentParser
  import inspect
  import re
  import codecs
  import unicodedata
  import json

  sys.path.append("%s/.." %(os.path.dirname(os.path.realpath(os.path.abspath(__file__))))) # Ho ho ho!
  from libcmdb2.core import CMDBServer, resources
  from libcmdb2.resources.common import Resource

  from cmdbtool import *

#  print "%s" %(sys.path)

except Exception, e:
  print "Could not load: %s" %(e)
  exit(1)

# Husk: "requests"

__version__ = '0.0.1'
__author__ = u'Erlend Bergs√•s <erlend.bergsaas@met.no>'

# Tee hee hee
def make_my_output(query, obj, output, output_format):

  if not output:
    output = query.client.default_output(obj)

  if not output_format:
    output_format = query.client.generate_output_format(output)

  compiled_output = query.client.compile_output(output, obj)
          
  if not compiled_output:
    print "Nothing to output"
    exit(1)

  return compiled_output, output_format

# Ugh, I realise I do stuff in a weird way. :)
def search_query(query, output, output_format, args):
  query.set_limit = args.query_limit
  query.set_offset = args.query_offset
   
  my_output = None
  my_format = None

  objects = 1
  count = 0
  while objects:
    objects = query.object_query()
        
    # Ugh I wish I could do "while objects = ..."
    if not isinstance(objects, list):
      break
        
    if args.count:
      print "Count: %d/%d" %(query.offset(), query.total_count())
      
    query.client.tq("printing some ''objects''")

    if args.dump and ('query_result' in args.dump or 'qr' in args.dump or 'queryresult' in args.dump):
#      query.client.tq("dump objects")
      print objects
#      query.client.tq()
      if 'qr_exit' in args.dump:
        exit(0) # Oh well. I should throw and exception. I don't care. :)

    for obj in objects:
      if not args.no_resolution:
        obj = query.resource_class(query.client.server, obj)

      if args.dump and 'object' in args.dump:
        query.client.dump_object(obj)

      if not my_output or not my_format:
        my_output, my_format = make_my_output(query, obj, output, output_format)

      count = count + 1

      try:
        print my_format % eval(my_output)
        
      # ugh. :(
      except UnicodeEncodeError:
        print query.client.unicode_fallback(unicode(my_format % eval(my_output)))
      
    query.client.tq()

    return count

###
# Setup argument parsing
parser = ArgumentParser(description='Drac drac drac drac!')
parser.add_argument("-1", "--each", help="Each argument is parsed as a separate query", action="store_true", default=False)
parser.add_argument("-r", "--resource", type=str, metavar="resource", help="Lookup specified resource.", default="host")
parser.add_argument("-F", "--follow", help="Follow resources recursively", action="store_true")
parser.add_argument("-i", "--ignore-case", help="Ignore case in searches", action="store_true")
parser.add_argument("-e", "--escapes", help="Interpret backslash escapes", action="store_true")
parser.add_argument("-o", "--output", help="Output fields")
parser.add_argument("-O", "--format", help="Output field format")
parser.add_argument("-c", "--count", help="Print count", action="store_true")
parser.add_argument("--query-limit", help="cmdb ''query limit''", type=int)
parser.add_argument("--query-offset", help="cmdb ''query offset''", type=int)
parser.add_argument("-D", "--dump", action="append", help="Dump ''resource'', ''api-base'', ''flt'', ''object'', etc.")
parser.add_argument("-d", "--dict-dump", action="append", dest="dict_dump", help="Dump api objects.")
parser.add_argument("-n", "--no-resolution", action="store_true", default=False, help="Don't use CMDB's resolver..")
parser.add_argument("-R", "--resolver", action="store_true", default=False, help="Use a simple ''dict'' resolver. Don't rely on CMDB backend resolving stuff.")
parser.add_argument("-X", "--xdebug", action="append")

args, leftover = parser.parse_known_args()

###
# Program: begin!

client = CMDB.Client(None)
if args.xdebug:
  client.xdebug(args.xdebug)
client.__init__('http://cmdb.met.no/api/v2/')

# Dump return from 
if args.dict_dump:
  for stuff in args.dict_dump:
    print json.dumps(client.get_dict(stuff, -1), indent=2)
  exit(0) 

resource = args.resource

if args.output != None:
  args.output = args.output.split(",")
  for idx, val in enumerate(args.output):
    # Ugh. I don't know python. :)
    tmp = val.split(".")
    if (len(tmp) > 1):
      args.output[idx] = tmp

#  Dump resource
if args.dump and 'resource' in args.dump:
  print "Resource: %s" %(resource)
  print
  rs = client.cache_resource(resource).resource_schema

  print "display_name: %s" %(client.cache_resource(resource).display_name)
  print "required_attrs: %s" %(", ".join(client.cache_resource(resource).required_attrs))
  print "optional_attrs: %s" %(", ".join(client.cache_resource(resource).optional_attrs))
  print ""
  print "Attributes:\n"
  for attr in rs:
    print("  %s\n    %s (%s)"%(attr, rs[attr]["help_text"], rs[attr]["type"]))
  
  exit(0)

#  Dump api base
if args.dump and 'api-base' in args.dump:
  print "Api base, baby"
  api_base = client.server._api_base
  for resource in api_base:
    print "  %s"%(resource)
 
  exit(0)

#  Dump "field looku ptypes"
if args.dump and ('flt' in args.dump or 'field-lookup-types' in args.dump):
  print "Field lookup types:\n"
  for n in client.server.field_lookup_types:
    print "%s" %(n)
  exit(0)

if args.dump and ('search_operators' in args.dump or 'so' in args.dump):
  print "Search operators matched to ''field lookup type'':\n"
  print "%-3s %-10s %-10s" %("", "Normal", "Case insensitive (-i)")
  print ""

  flt = client.server.field_lookup_types

  for n in client.search_operators.keys():
#    print "%-10s %-10s %-10s" %(n, client.search_operators[n][0], client.search_operators[n][1])
    print "%-3s %-10s %-10s " %((n,)+client.search_operators[n])
  exit(0)

output = args.output
output_format = args.format

if args.escapes:
  output_format = output_format.decode('string_escape')

# Blurp
try:
  count = 0
  if not args.each:
    search = client.init_basic_search(resource, leftover)
    query = client.new_query(resource, **search)
    results = search_query(query, output, output_format, args)
    count = count + results
  else:
    for single in leftover:
      search = client.init_basic_search(resource, [single])
      query = client.new_query(resource, **search)
      results = search_query(query, output, output_format, args)
      count = count + results

except KeyboardInterrupt:
  print "^C"
  exit(2)

# Output count?
if args.count:
  print "Count: %d" %(count) 

# Return non-zero if query returned nothing
if (count == 0):
  exit(1)

# Return zero.
exit(0)



# vim: syntax=python
