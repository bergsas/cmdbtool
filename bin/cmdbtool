#!/usr/bin/python
# -*- coding: utf-8 -*-
try:
  import sys
except Exception, e:
  print "Could not load ''sys'': %s" %(e)
  exit(1)

try:
  from argparse import ArgumentParser
  import inspect
  import re
  import codecs
  import unicodedata
  from libcmdb2.core import CMDBServer, resources
  from libcmdb2.resources.common import Resource

  from cmdbtool import *

  print "%s" %(sys.path)

except Exception, e:
  print "Could not load: %s" %(e)
  exit(1)

# Husk: "requests"

__version__ = '0.0.1'
__author__ = u'Erlend Bergsås <erlend.bergsaas@met.no>'

###
# Some configuration. hrm... Hardcoding rox
reversal = {
  'host': ["item", "serial"] 
}
default_output = {
  'host': ["name", ["item", "serial"]]
}

# Compile ''query''
# This is DIRTY. And: rather unsafe. :) Oh well.
###
# Setup argument parsing
parser = ArgumentParser(description='Drac drac drac drac!')
parser.add_argument("-r", "--resource", type=str, metavar="resource", help="Lookup specified resource.")
parser.add_argument("-k", "--key", type=str, metavar="key", help="Lookup using specified key.")
parser.add_argument("--flt", "-l", help="Field lookup type")

parser.add_argument("-R", "--reverse", help="Lookup reverse (serial?)", action="store_true")
parser.add_argument("-F", "--follow", help="Follow resources recursively", action="store_true")
parser.add_argument("-i", "--ignore-case", help="Ignore case in searches", action="store_true")
parser.add_argument("-E", "--regex", help="Use regex.", action="store_true")
parser.add_argument("-o", "--output", help="Output fields")
parser.add_argument("-O", "--format", help="Output field format")
parser.add_argument("-c", "--count", help="Print count", action="store_true")
parser.add_argument("--query-limit", help="cmdb ''query limit''", type=int)
parser.add_argument("--query-offset", help="cmdb ''query offset''", type=int)
parser.add_argument(
  'wordlist',
  metavar = 'word',
  nargs='*',
  help='Words to look up'
  )
parser.add_argument("--dump-resource", action="store_true", help="Dump resource attributes.")
parser.add_argument("--dump-api-base", help="Dump api base", action="store_true")
parser.add_argument("--dump-flt", help="Show ''field lookup types''", action="store_true")
parser.add_argument("--dump-object", help="Dump returned objects", action="store_true")


args = parser.parse_args()

###
# Program: begin!
client = CMDB.Client('http://cmdb.met.no', '/api/v2/')

resource = args.resource
if resource == None:
  resource = default_output.keys()[0]

if args.output != None:
  args.output = args.output.split(",")
  for idx, val in enumerate(args.output):
    # Ugh. I don't know python. :)
    tmp = val.split(".")
    if (len(tmp) > 1):
      args.output[idx] = tmp

# Type spørring
if args.flt:
  flt = args.flt
else:
  if args.regex or args.ignore_case:
    print "Ugh ugh. flt trumphs regex/ignore_case"

  if args.regex: 
    flt = 'regex'
  elif args.ignore_case:
    flt = 'icontains'
  else:
    flt = 'contains'

#  Dump resource
if args.dump_resource:
  print "Resource: %s" %(resource)
  rs = client.cache_resource(resource).resource_schema

  for attr in rs:
    print("  %s\n    %s (%s)"%(attr, rs[attr]["help_text"],rs[attr]["type"]))
  
  exit(0)

#  Dump api base
if args.dump_api_base:
  print "Api base, baby."
  api_base = client.server._api_base
  for resource in api_base:
    print(resource)
  
  exit(0)

#  Dump "field looku ptypes"
if args.dump_flt:
  print "Flt baby (field lookup type!)"
  print client.server.field_lookup_types
  exit(0)

resource_cache = client.cache_resource(resource)
resource_class = resource_cache.resource_class

# Select, as it were, 'key' attribute
if not args.key == None:
  key = "__".join(args.key.split(".")) # Ugh ugh ugh ug[h]ly
else:
  if args.reverse:
    try:
      key = reversal[resource]
    except KeyError, e:
      print "Resource %s has no reversal." %(resource)
      exit(1)
  else:
    key = resource_cache.display_name

# Assemble 'query' string
if not isinstance(flt, list):
  flt = [flt]
if not isinstance(key, list):
  key = [key]
query_key = "__".join(key + flt)

if args.output != None:
  output = args.output
else:
  try:
    output = default_output[resource]
  except KeyError, e:
    output = [resource_cache.display_name, resource_cache.pk]

if args.format == None:
  output_format = ": %s"*len(output)
  output_format = output_format[2:]
else:
  output_format = args.format

# Blurp
if not args.wordlist:
  args.wordlist = {None}

try:
  compiled_output = False
  for word in args.wordlist:

    # I've no idea whether this is "pythonic" or not.
    query = client.new_query(resource, **{query_key: word})

    query.set_limit = args.query_limit
    query.set_offset = args.query_offset
    query.make_ready(word)

    
    objects = 1
    try:
      while objects:
        objects = query.object_query()
        
        # Ugh I wish I could do "while objects = ..."
        if not isinstance(objects, list):
          break
        
        if args.count:
          print "Count: %d/%d" %(query.offset(), query.total_count())
        
        for obj in objects:
          obj = resource_cache.resource_class(client.server, obj)

          if not compiled_output:
            compiled_output = client.compile_output(output, obj)
       
          if args.dump_object:
            client.dump_object(obj)

          print output_format % eval(compiled_output)

    except KeyboardInterrupt:
      print "Uh oh."
      raise KeyboardInterrupt

except KeyboardInterrupt:
  print "^C"
exit(0)



# vim: syntax=python
