#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys
import os
import json


# Comments are for sissies.
# This tool is not finished yet.
sys.path.append("%s/.." %(os.path.dirname(os.path.realpath(os.path.abspath(__file__))))) # Ho ho ho!

from argparse import ArgumentParser
from libcmdb2.core import CMDBServer

from cmdbtool import *

#parser.add_argument("-r", "--resource", type=str, metavar="resource", help="Lookup specified resource.")


parser = ArgumentParser(description='Rack tool')
#parser.add_argument("--rack", type=str, metavar="rack")
#parser.add_argument("--units", "-u", type=str)
parser.add_argument("-D", "--dump", action='append')
parser.add_argument("-n", "--no-reverse", dest='reverse', action='store_false', default=True,  help="Don't resolve rack items's hostnames.")
parser.add_argument("-i", "--informative", action="store_true", default=False, help="Print info about each rack, in addition to rack overview")
parser.add_argument("-H", "--host", action="store_true", default=False, help="Lookup rackunit by host name rather than serial or whatever")
parser.add_argument("-s", "--search", action='store_true', default=False)


#parser.add_argument("-r", "--resource", type=str, metavar="resource", help="Lookup specified resource.")
#parser.add_argument("-F", "--follow", help="Follow resources recursively", action="store_true")

args, leftover = parser.parse_known_args()
try:

  client = CMDB.Client('http://cmdb.met.no', '/api/v2/')
  
  rackunit_resource_name = 'rackunit'
  rack_resource_name = 'rack'
  host_resource_name = 'host'
  item_resource_name = 'item'

except KeyboardInterrupt:
  print '^C'
  exit(1)


# Program: begin!
def __main__():
  if args.search:
    search_mode(client, leftover)
  else:
    rack_mode(client, leftover)

def search_mode(client, leftover):
  try:
    # First: search using item....
    
    #rackunit_search = client.init_basic_search(rackunit_resource_name, ['rack.id===%s'%(rack_obj['id'])])
    reverse = {}

    if args.host:
      rackunits = {}
      search = client.init_basic_search(host_resource_name, leftover)
      hosts = get_hosts(client, client.new_query(host_resource_name, **search), 2)
      if args.dump and 'hosts' in args.dump:
        print "*** dump hosts:"
        print json.dumps(hosts, indent=2)
        print "***"

      if not hosts:
        print "No hosts found"
        exit(1)

      # Compose searches using item id. :)
      for item_id,info in hosts.items():
        search = client.init_basic_search(rackunit_resource_name, ['item.id===%s'%(item_id)])
        this_rackunits = get_rackunits(client, client.new_query(rackunit_resource_name, **search), 1)
        if not this_rackunits:
          continue

        for rackunit,item in this_rackunits.items():
          if not rackunit in rackunits:
            reverse[item_id] = info
            rackunits[rackunit] = item
    else:
      search = client.init_basic_search(rackunit_resource_name, leftover)
      rackunits = get_rackunits(client, client.new_query(rackunit_resource_name, **search), 1)
    
    if args.dump and 'rackunits' in args.dump:
      print "*** dump rackunits:"
      print json.dumps(rackunits, indent=2)
      print "***"
 
    if not rackunits:
      print "No rackunits found"
      exit(1)

    for rackunit,item in rackunits.items():
      if reverse:
        this_rev = reverse[item['item']['id']]['name']
      elif args.reverse:
        this_rev = get_reverse_item(item['item']['id'])
      else:
        this_rev= None

      print "%s-%s %s (%s) %s (%s)" %(
        item['rack']['name'], rackunit, 
        this_rev,
        item['item']['serial'], 
        item['item']['itemmodel']['name'],
        item['item']['itemmodel']['type']['name']
      )


  except KeyboardInterrupt:
    print "^C"
    exit(1)


def rack_mode(client, leftover):
  try:
    racks = {}
    for rack in leftover:
      racks[rack] = get_rack(client, rack)
  
    # Reverse lookup stuff.
    items = {}
    widths = {}
    racksize = 0

    for rack in leftover:
      if not racks[rack]:
        continue

      if not racks[rack]['info'] or not racks[rack]['info']['itemmodel']:
        if 42 > racksize:
          racksize = 42

      if 'itemmodel' in racks[rack]['info'] and 'size' in racks[rack]['info']['itemmodel']:
        thissize = racks[rack]['info']['itemmodel']['size']
        if thissize > racksize:
          racksize = thissize

      widths[rack] = 0
      
      for rackpos,rackunit in racks[rack]['units'].items():
        item_id = rackunit['item']['id']
        if args.reverse and not item_id in items:
          items[item_id] = get_reverse_item(client, item_id)
        
        if item_id in items and items[item_id]:
          racks[rack]['units'][rackpos]['display'] = items[item_id]
        else:
          #racks[rack]['units'][rackpos]['display'] = rackunit['item']['itemmodel']['name']
          racks[rack]['units'][rackpos]['display'] = rackunit['item']['serial']

        width = len(racks[rack]['units'][rackpos]['display'])
        if widths[rack] < width:
          widths[rack] = width
       
    # Calculate width of "all" racks
    total = 0
    formater = []
    for size in widths.values():
      formater += ["%%-%d.%ds" %(size +3,size +3)]
      total += size + 3

    formater = '|'.join(formater)

    #print ("   |"+formater)%tuple(leftover)
    formater = "%2d |" + formater
    print ""    
    for row in range(racksize, 0, -1):
      rowunits = []
      for rack in leftover:
        ru = racks[rack]['units'].get(row, None)
        if not ru:
          rowunits += ['']
          continue
        rowunits += [ru['display']]
      print formater%tuple([row] + rowunits)

  except KeyboardInterrupt:
    print "^c"


    # Paint rack canvas. :)
    # Sizes

def get_rack(client, rack):
  rack_search = client.init_basic_search(rack_resource_name, ['name===%s'%(rack)]) 
  rack_query = client.new_query(rack_resource_name, **rack_search)
  rack_objects = True

  while rack_objects:
    rack_objects = rack_query.object_query()
       
    if not rack_objects:
      break

    for rack_obj in rack_objects:
      if args.dump and 'rack' in args.dump:
        print "*** dump rack:"
        print json.dumps(rack_obj, indent=2)
        print "***"
          
      rackinfo = client.get_dict(rack_obj['item'], -1)
      
      if not rackinfo:
        continue

      if args.dump and 'rackinfo' in args.dump:
        print json.dumps(rackinfo, indent=2)

      rackunit_search = client.init_basic_search(rackunit_resource_name, ['rack.id===%s'%(rack_obj['id'])])
      return {
        'info': rackinfo,
        'units': get_rackunits(client,client.new_query(rackunit_resource_name, **rackunit_search))
      }

def get_rackunits(client, query, recurse = -1):
  rack = {}
  while True:
    objects = query.object_query()

    if not objects:
      break

    # These should probably be references in a better
    #   manner. Oh well. 
    for obj in objects:
      if args.dump and 'rackunit' in args.dump:
        print json.dumps(obj, indent=2)

      obj['item'] = client.get_dict(obj['item'], recurse)
      if not obj['item']:
        obj['item'] = {}
      obj['rack'] = client.get_dict(obj['rack'], recurse)
      if not obj['rack']:
        obj['rack'] = {}
      obj['width'] = 0  # HACKYKYK

      if args.dump and 'item_json' in args.dump:
        print json.dumps(obj['item'], indent=2)

      rack[obj['ruid']] = obj
  return rack

def get_hosts(client, query, recurse = -1):
  objects = True
  hosts = {}
  while objects:
    objects = query.object_query()

    if not objects:
      break

    # These should probably be references in a better
    #   manner. Oh well. 
    for obj in objects:
      obj['item'] = client.get_dict(obj['item'], recurse)
      if not obj['item']:
        obj['item'] = {}

      # Only return host if 'item' 'id' is known. Oh well.
      if 'id' in obj['item']:
        hosts[obj['item']['id']] = obj
  return hosts


def get_reverse_item(client, item):
 host_search = client.init_basic_search(host_resource_name, ['item.id===%s'%(item)])
 host_query = client.new_query(host_resource_name, **host_search)
 host_objects = host_query.object_query()
 for host_object in host_objects:
   if 'name' in host_object:
     return host_object['name']
 return None
__main__()
# vim: syntax=python
